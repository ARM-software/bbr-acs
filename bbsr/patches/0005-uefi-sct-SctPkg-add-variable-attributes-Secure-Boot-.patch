From 48dd6023617c200ac41ac37d23eda22bde2c505b Mon Sep 17 00:00:00 2001
From: Stuart Yoder <stuart.yoder@arm.com>
Date: Tue, 1 Jun 2021 13:13:39 -0500
Subject: [PATCH 05/22] uefi-sct/SctPkg: add variable attributes Secure Boot
 test

-verify the attributes of PK/KEK/db/dbx comply with the UEFI spec
-verify the values of SecureBoot and SetupMode variables

Signed-off-by: Stuart Yoder <stuart.yoder@arm.com>
---
 uefi-sct/SctPkg/CommonGenFramework.sh         |   2 +
 uefi-sct/SctPkg/Config/Data/Category.ini      |   7 +
 .../SecureBoot/BlackBoxTest/Guid.c            |  19 +
 .../SecureBoot/BlackBoxTest/Guid.h            |  40 ++
 .../BlackBoxTest/SecureBootBBTest.inf         |   1 +
 .../BlackBoxTest/SecureBootBBTestMain.c       |  10 +
 .../BlackBoxTest/SecureBootBBTestMain.h       |  11 +
 .../BlackBoxTest/VariableAttributesBBTest.c   | 395 ++++++++++++++++++
 8 files changed, 485 insertions(+)
 create mode 100644 uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/VariableAttributesBBTest.c

diff --git a/uefi-sct/SctPkg/CommonGenFramework.sh b/uefi-sct/SctPkg/CommonGenFramework.sh
index 7b8ff473..72c52ae5 100755
--- a/uefi-sct/SctPkg/CommonGenFramework.sh
+++ b/uefi-sct/SctPkg/CommonGenFramework.sh
@@ -249,6 +249,8 @@ then
     cp $ProcessorType/UFSDeviceConfigBBTest.efi                $Framework/Test/ > NUL
     cp $ProcessorType/ResetNotificationBBTest.efi              $Framework/Test/ > NUL
 
+    cp $ProcessorType/SecureBootBBTest.efi                     $Framework/Test/ > NUL
+
     # *********************************************
     # Copy ENTS binary
     # *********************************************
diff --git a/uefi-sct/SctPkg/Config/Data/Category.ini b/uefi-sct/SctPkg/Config/Data/Category.ini
index 534114c3..5f903368 100644
--- a/uefi-sct/SctPkg/Config/Data/Category.ini
+++ b/uefi-sct/SctPkg/Config/Data/Category.ini
@@ -137,6 +137,13 @@ InterfaceGuid = AFF115FB-387B-4C18-8C41-6AFC7F03BB90
 Name          = RuntimeServicesTest
 Description   =
 
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = CBADA58E-A1AA-45DF-BDDF-F9BA1292F887
+InterfaceGuid = AFF115FB-387B-4C18-8C41-6AFC7F03BB90
+Name          = RuntimeServicesTest\SecureBootTest
+Description   =
+
 [Category Data]
 Revision      = 0x00010000
 CategoryGuid  = D6844631-0A1E-42D1-A594-60354847B676
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
index 0c58a5b8..cefe1828 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
@@ -31,3 +31,22 @@ Abstract:
 // defined in the UEFI spec
 EFI_GUID gEfiImageSecurityDatabaseGuid = EFI_IMAGE_SECURITY_DATABASE_GUID;
 
+//
+// test assertion GUIDs
+//
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid001 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_001_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid002 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_002_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid003 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_003_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid004 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_004_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid005 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_005_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid006 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_006_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid007 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_007_GUID;
+
+EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid008 = EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_008_GUID;
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
index df0923f4..09f0e972 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
@@ -34,3 +34,43 @@ extern EFI_GUID gEfiImageSecurityDatabaseGuid;
 
 extern EFI_GUID gEfiGlobalVariableGuid;
 
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_001_GUID \
+{ 0x98f4a3f2, 0xd329, 0x4813, {0xb0, 0x0f, 0x32, 0x4a, 0x22, 0xf7, 0x0d, 0x3c }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid001;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_002_GUID \
+{ 0x42fe7061, 0x7af6, 0x4ee7, {0x83, 0xed, 0x72, 0xba, 0x50, 0x24, 0xce, 0x83 }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid002;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_003_GUID \
+{ 0x1a65c9b2, 0x66ab, 0x4363, {0xa1, 0x8f, 0x52, 0xe1, 0x2f, 0xa2, 0x00, 0xbb }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid003;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_004_GUID \
+{ 0x83d73dd3, 0x3827, 0x4762, {0x9e, 0x4e, 0xc7, 0xd8, 0x65, 0xf9, 0x4f, 0x27 }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid004;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_005_GUID \
+{ 0x67bce6bb, 0xfe72, 0x4e4b, {0x8d, 0x81, 0xf3, 0x7e, 0xe7, 0xc5, 0x64, 0x02 }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid005;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_006_GUID \
+{ 0xc465f19a, 0x87a5, 0x46d2, {0xb9, 0x5f, 0x54, 0x5a, 0x4b, 0x38, 0x2e, 0x9b }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid006;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_007_GUID \
+{ 0xa4c882f4, 0x7392, 0x49be, {0x95, 0x0c, 0x5e, 0x7a, 0x31, 0x71, 0x1a, 0x12 }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid007;
+
+#define EFI_TEST_SECUREBOOTVARIABLEATTRIBUTES_ASSERTION_008_GUID \
+{ 0xbc37e48e, 0x614f, 0x44e1, {0x9d, 0x9a, 0x80, 0xe5, 0x6c, 0x9b, 0x00, 0x90 }}
+
+extern EFI_GUID gSecureBootVariableAttributesBbTestAssertionGuid008;
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTest.inf b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTest.inf
index 01f5a5c9..6e49557d 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTest.inf
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTest.inf
@@ -37,6 +37,7 @@
   SecureBootBBTestMain.h
   SecureBootBBTestMain.c
   SecureBootBBTestSupport.c
+  VariableAttributesBBTest.c
   Guid.h
   Guid.c
 
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.c
index de616d41..d96decd1 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.c
@@ -49,6 +49,16 @@ EFI_GUID gSupportProtocolGuid[] = {
 };
 
 EFI_BB_TEST_ENTRY_FIELD gBBTestEntryField[] = {
+  {
+    VARIABLE_ATTRIBUTES_TEST_GUID,
+    L"VariableAttributes",
+    L"Verifies Secure Boot variable attributes.",
+    EFI_TEST_LEVEL_MINIMAL,
+    gSupportProtocolGuid,
+    EFI_TEST_CASE_AUTO,
+    VariableAttributesTest 
+  },
+
   0
 };
 
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.h b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.h
index 3dc34908..2d1b3b51 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.h
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestMain.h
@@ -47,9 +47,20 @@ Abstract:
 
 #define MAX_BUFFER_SIZE                       256
 
+#define VARIABLE_ATTRIBUTES_TEST_GUID \
+  { 0xE39747C4, 0x22D0, 0x4D52, {0x9C, 0x15, 0x3C, 0x4E, 0xFA, 0x80, 0xE6, 0xC8 }}
+
+
 //
 // Prototypes
 //
+EFI_STATUS
+VariableAttributesTest(
+  IN EFI_BB_TEST_PROTOCOL       *This,
+  IN VOID                       *ClientInterface,
+  IN EFI_TEST_LEVEL             TestLevel,
+  IN EFI_HANDLE                 SupportHandle
+  );
 
 //
 // Support functions
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/VariableAttributesBBTest.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/VariableAttributesBBTest.c
new file mode 100644
index 00000000..37c9223e
--- /dev/null
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/VariableAttributesBBTest.c
@@ -0,0 +1,395 @@
+/** @file
+
+  Copyright 2006 - 2012 Unified EFI, Inc.<BR>
+  Copyright (c) 2010 - 2018, Intel Corporation. All rights reserved.<BR>
+  Copyright 2021, Arm LTD.
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at 
+  http://opensource.org/licenses/bsd-license.php
+ 
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+ 
+**/
+/*++
+
+Module Name:
+  VariableAttributesTest.c
+
+Abstract:
+  Source file for Secure Boot Variable Attribute Black-Box Test - Conformance Test.
+
+--*/
+
+#include "SctLib.h"
+#include "SecureBootBBTestMain.h"
+#include "SecureBootBBTestSupport.h"
+
+// Global variable attributes as defined in Table 14 in the UEFI spec
+#define SECUREBOOT_ATTRIBUTES (EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS)
+#define SETUPMODE_ATTRIBUTES (EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS)
+#define PK_ATTRIBUTES (EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | \
+                       EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS)
+#define KEK_ATTRIBUTES (EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | \
+                       EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS)
+#define DB_ATTRIBUTES (EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS)
+#define DBX_ATTRIBUTES (EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS)
+
+//
+// Prototypes (external)
+//
+
+EFI_STATUS
+VariableAttributesTest (
+  IN EFI_BB_TEST_PROTOCOL       *This,
+  IN VOID                       *ClientInterface,
+  IN EFI_TEST_LEVEL             TestLevel,
+  IN EFI_HANDLE                 SupportHandle
+  );
+
+//
+// Functions
+//
+
+/**
+ *  Entry point for Secure Boot Variable Attributes Test.
+ *  @param This             A pointer to the EFI_BB_TEST_PROTOCOL instance.
+ *  @param ClientInterface  A pointer to the interface to be tested.
+ *  @param TestLevel        Test "thoroughness" control.
+ *  @param SupportHandle    A handle containing support protocols.
+ *  @return EFI_SUCCESS     Successfully.
+ *  @return Other value     Something failed.
+ */
+EFI_STATUS
+VariableAttributesTest(
+  IN EFI_BB_TEST_PROTOCOL       *This,
+  IN VOID                       *ClientInterface,
+  IN EFI_TEST_LEVEL             TestLevel,
+  IN EFI_HANDLE                 SupportHandle
+  )
+{
+  EFI_STATUS                          Status;
+  EFI_TEST_ASSERTION                  Result;
+  EFI_RUNTIME_SERVICES                *RT;
+  EFI_STANDARD_TEST_LIBRARY_PROTOCOL  *StandardLib;
+  EFI_TEST_PROFILE_LIBRARY_PROTOCOL   *ProfileLib;
+  EFI_TEST_LOGGING_LIBRARY_PROTOCOL   *LoggingLib;
+  UINTN                               DataSize;
+  UINT8                               Data[MAX_BUFFER_SIZE];
+  UINT32                              Attributes;
+
+  //
+  // Get test support library interfaces
+  //
+  Status = GetTestSupportLibrary (
+             SupportHandle,
+             &StandardLib,
+             &ProfileLib,
+             &LoggingLib
+             );
+
+  if (EFI_ERROR(Status)) {
+    return Status;
+  }
+
+  RT = (EFI_RUNTIME_SERVICES *)ClientInterface;
+
+  //
+  // Trace ...
+  //
+  if (LoggingLib != NULL) {
+    LoggingLib->EnterFunction (
+                  LoggingLib,
+                  L"VariableAttributesTest",
+                  L"UEFI spec, Table 14"
+                  );
+  }
+
+  DataSize = MAX_BUFFER_SIZE;
+  Status = RT->GetVariable (
+                 L"SecureBoot",               // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 Data                         // Data
+                 );
+
+  // if SecureBoot is not enabled, exit
+  if (EFI_ERROR(Status) || Data[0] != 1) {
+    StandardLib->RecordMessage (
+                     StandardLib,
+                     EFI_VERBOSE_LEVEL_DEFAULT,
+                     L"VariableAttributesBBTest: SecureBoot not enabled\n"
+                     );
+    return EFI_NOT_FOUND;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 EFI_TEST_ASSERTION_PASSED,
+                 gSecureBootVariableAttributesBbTestAssertionGuid001,
+                 L"SecureBoot - Verify SecureBoot is enabled ",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  DataSize = MAX_BUFFER_SIZE;
+  Status = RT->GetVariable (
+                 L"SetupMode",                // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 Data                         // Data
+                 );
+
+  // if SetupMode != 0, exit
+  if (EFI_ERROR(Status) || Data[0] != 0) {
+    StandardLib->RecordMessage (
+                     StandardLib,
+                     EFI_VERBOSE_LEVEL_DEFAULT,
+                     L"VariableAttributesBBTest: SetupMode != 0\n"
+                     );
+    return EFI_NOT_FOUND;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 EFI_TEST_ASSERTION_PASSED,
+                 gSecureBootVariableAttributesBbTestAssertionGuid002,
+                 L"SecureBoot - Verify SetupMode == 0",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  // Verify attributes of SecureBoot variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"SecureBoot",               // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 NULL                         // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && Attributes == SECUREBOOT_ATTRIBUTES) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid003,
+                 L"SecureBoot - Verify SecureBoot variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, SECUREBOOT_ATTRIBUTES
+                 );
+
+  // Verify attributes of SetupMode variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"SetupMode",                // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 NULL                         // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && Attributes == SETUPMODE_ATTRIBUTES) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid004,
+                 L"SecureBoot - Verify SetupMode variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, SETUPMODE_ATTRIBUTES
+                 );
+
+  // Verify attributes of PK variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"PK",                       // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 NULL                         // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && Attributes == PK_ATTRIBUTES) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid005,
+                 L"SecureBoot - Verify PK variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, PK_ATTRIBUTES
+                 );
+
+  // Verify attributes of KEK variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"KEK",                      // VariableName
+                 &gEfiGlobalVariableGuid,     // VendorGuid
+                 &Attributes,                 // Attributes
+                 &DataSize,                   // DataSize
+                 NULL                         // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && Attributes == KEK_ATTRIBUTES) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid006,
+                 L"SecureBoot - Verify KEK variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, KEK_ATTRIBUTES
+                 );
+
+  // Verify attributes of db variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"db",                          // VariableName
+                 &gEfiImageSecurityDatabaseGuid, // VendorGuid
+                 &Attributes,                    // Attributes
+                 &DataSize,                      // DataSize
+                 NULL                            // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && (Attributes & DB_ATTRIBUTES)) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid007,
+                 L"SecureBoot - Verify DB variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, DB_ATTRIBUTES
+                 );
+
+  // Verify attributes of dbx variable
+  DataSize = 0;
+  Attributes = 0;
+  Status = RT->GetVariable (
+                 L"dbx",                          // VariableName
+                 &gEfiImageSecurityDatabaseGuid, // VendorGuid
+                 &Attributes,                    // Attributes
+                 &DataSize,                      // DataSize
+                 NULL                            // Data
+                 );
+
+  if (Status == EFI_BUFFER_TOO_SMALL && (Attributes & DBX_ATTRIBUTES)) {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  } else {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootVariableAttributesBbTestAssertionGuid008,
+                 L"SecureBoot - Verify DBX variable attributes",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  StandardLib->RecordMessage (
+                 StandardLib,
+                 EFI_VERBOSE_LEVEL_DEFAULT,
+                 L"Attributes=0x%x, Expected=0x%x\n",
+                 Attributes, DB_ATTRIBUTES
+                 );
+
+  //
+  // Trace ...
+  //
+  if (LoggingLib != NULL) {
+    LoggingLib->ExitFunction (
+                  LoggingLib,
+                  L"VariableAttributesTest",
+                  L"UEFI spec, Table 14"
+                  );
+  }
+
+  //
+  // Done
+  //
+  return EFI_SUCCESS;
+}
-- 
2.17.1

